package edu.cmu.pdl.metadatabench.cluster;

/**
 * Provides access to the namespace data, i.e. to directories and files generated by the benchmark.
 * These are normally stored in (distributed) in-memory maps. 
 * Implementing classes are not supposed to access the file system, but the storage used for
 * 
 * A namespace map contains mappings of directory or file ids (similar to inode number) to the path names.
 * 
 * @author emil.rakadjiev
 *
 */
public interface INamespaceMapDAO {

	/**
	 * Creates a directory entry
	 * 
	 * @param id The id of the directory
	 * @param path The path of the directory
	 */
	public void createDir(long id, String path);
	
	/**
	 * Get a directory path
	 * 
	 * @param id The id of the directory
	 * @return The path of the directory, or null if there is no such directory id
	 */
	public String getDir(long id);
	
	/**
	 * Deletes a directory entry
	 * 
	 * @param id The id of the directory
	 */
	public void deleteDir(long id);
	
	/**
	 * Gets the number of existing directory entries.
	 * 
	 * @return Number of existing directory entries
	 */
	public long getNumberOfDirs();
	
	/**
	 * Creates a file entry
	 * 
	 * @param id The id of the file
	 * @param path The path of the file
	 */
	public void createFile(long id, String path);
	
	/**
	 * Gets a file path
	 * 
	 * @param id The id of the file
	 * @return The path of the file, or null if there is no such file id
	 */
	public String getFile(long id);
	
	/**
	 * Deletes a file entry
	 * 
	 * @param id The id of the file
	 */
	public void deleteFile(long id);
	
	/**
	 * Changes the path of a file
	 * 
	 * @param id The id of the file
	 * @param pathNew The new path of the file
	 */
	public void renameFile(long id, String pathNew);
	
	/**
	 * Gets the number of existing file entries.
	 * 
	 * @return Number of existing file entries
	 */
	public long getNumberOfFiles();
	
}

package edu.cmu.pdl.metadatabench.cluster;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.IMap;

/**
 * Provides access to the namespace data, i.e. to directories and files generated by the benchmark, stored 
 * in distributed Hazelcast maps.
 * 
 * A namespace map contains mappings of directory or file ids (similar to inode number) to the path names.
 * 
 * @author emil.rakadjiev
 *
 */
public class HazelcastMapDAO implements INamespaceMapDAO {

	private IMap<Long,String> dirMap;
	private IMap<Long,String> fileMap;

	/** 
	 * The name of the map containing the directories.
	 * This has to match the name defined in the Hazelcast configuration xml file. 
	 */
	private static final String DIR_MAP_NAME = "directories";
	/** 
	 * The name of the map containing the files.
	 * This has to match the name defined in the Hazelcast configuration xml file. 
	 */
	private static final String FILE_MAP_NAME = "files";
	
	/**
	 * @param hazelcast The Hazelcast instance related to the maps.
	 */
	public HazelcastMapDAO(HazelcastInstance hazelcast){
		dirMap = hazelcast.getMap(DIR_MAP_NAME);
		fileMap = hazelcast.getMap(FILE_MAP_NAME);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void createDir(long id, String path) {
		dirMap.put(id, path);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String getDir(long id) {
		return dirMap.get(id);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void deleteDir(long id) {
		dirMap.remove(id);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public long getNumberOfDirs() {
		return dirMap.size();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void createFile(long id, String path) {
		fileMap.put(id, path);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String getFile(long id) {
		return fileMap.get(id);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void deleteFile(long id) {
		fileMap.remove(id);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void renameFile(long id, String pathNew){
		fileMap.replace(id, pathNew);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public long getNumberOfFiles() {
		return fileMap.size();
	}

}
